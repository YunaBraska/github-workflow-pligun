# GitHub Actions Workflow for launching UI tests on Linux, Windows, and Mac in the following steps:
# - prepare and launch IDE with your plugin and robot-server plugin, which is needed to interact with UI
# - wait for IDE to start
# - run UI tests with separate Gradle task
#
# Please check https://github.com/JetBrains/intellij-ui-test-robot for information about UI tests with IntelliJ Platform
#
# Workflow is triggered manually.

name: Run UI Tests
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:

  testUI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            runIde: |
              export DISPLAY=:99.0
              Xvfb -ac :99 -screen 0 1920x1080x16 &
              gradle runIdeForUiTests &
          #          - os: windows-latest
          #            runIde: start gradlew.bat runIdeForUiTests
          - os: macos-latest
            runIde: ./gradlew runIdeForUiTests &

    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3


      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.10.0
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.7.0


      - name: Set SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set Git user
        run: |
          git config --global user.name "Jonathan Gafner"
          git config --global user.email "jgafner@dorkag.com"

      # Run IDEA prepared for UI testing
      - name: Run IDE
        run: ${{ matrix.runIde }}

      # Wait for IDEA to be started
      - name: Health Check
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://127.0.0.1:8082
          max-attempts: 15
          retry-delay: 30s

      # Run tests
      - name: Tests
        env:
          AZD_TOKEN: ${{ secrets.AZD_TOKEN }}
        run: ./gradlew check -PrunUiTests=true

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result-${{ matrix.os }}
          path: ${{ github.workspace }}/build/reports

      - name: Save Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.os }}
          path: ${{ github.workspace }}/build/reports/kover/report.xml

  aggregateCoverage:
    needs: testUI
    runs-on: ubuntu-latest
    steps:
      # Download coverage reports from each OS run
      - name: Download Coverage from Ubuntu
        uses: actions/download-artifact@v3
        with:
          name: coverage-ubuntu-latest
          path: coverage-reports/ubuntu-latest/

      # Uncomment if you add windows to the matrix in the future
      # - name: Download Coverage from Windows
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: coverage-windows-latest
      #     path: coverage-reports/windows-latest/

      - name: Download Coverage from MacOS
        uses: actions/download-artifact@v3
        with:
          name: coverage-macos-latest
          path: coverage-reports/macos-latest/

      # Upload all coverage reports to codecov
      - name: Upload Aggregate Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          directory: coverage-reports/
          flags: integration
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

